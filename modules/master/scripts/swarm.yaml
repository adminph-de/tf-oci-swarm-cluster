version: "3.8"

services:

  whoami:
    image: traefik/whoami:latest
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints: [node.role == manager]
      labels:
        - traefik.enable=true
        - traefik.docker.network=lb_network
        - traefik.constraint-label=traefik-public
        - traefik.http.routers.whoami.rule=Path(`/whoami`)
        #- traefik.http.routers.whoami.entrypoints=https
        #- traefik.http.routers.whoami.tls=true
        - traefik.http.services.whoami.loadbalancer.server.port=80
    networks:
        - lb_network

  agent:
    image: portainer/agent:latest
    environment:
      # REQUIRED: Should be equal to the service name prefixed by "tasks." when
      # deployed inside an overlay network
      AGENT_CLUSTER_ADDR: tasks.swarm_agent
      AGENT_PORT: 9001
      # LOG_LEVEL: debug
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker/volumes:/var/lib/docker/volumes
    networks:
      - agent_network
    deploy:
      mode: global
      placement:
        constraints: [node.platform.os == linux]

  portainer:
    image: portainer/portainer-ce:latest
    command: -H tcp://tasks.swarm_agent:9001 --tlsskipverify
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/nfsshare/.portainer:/data
    networks:
      - agent_network
      - lb_network
    deploy:
      mode: replicated
      placement:
        constraints: [node.role == manager]
      replicas: 1
      labels:
          - traefik.enable=true
          - traefik.docker.network=lb_network
          - traefik.constraint-label=traefik-public
          - traefik.http.routers.portainer.rule=(Host(`${oci_swarm_fqdn_portainer}`) && PathPrefix(`/`))
          #- traefik.http.routers.portainer.entrypoints=https
          #- traefik.http.routers.portainer.tls=true
          - traefik.http.services.portainer.loadbalancer.server.port=9000

  traefik:
    image: traefik:latest
    ports:
      - target: 80
        published: 80
        protocol: tcp
        mode: host
      - target: 443
        published: 443
        protocol: tcp
        mode: host
    deploy:
      mode: global
      placement:
          constraints:
              - node.role == manager
      restart_policy:
          condition: on-failure
          max_attempts: 3
          window: 120s
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /var/log/traefik:/var/log/traefik:rw
    command:
      - --providers.docker
      - --providers.docker.constraints=Label(`traefik.constraint-label`, `traefik-public`)
      - --providers.docker.exposedbydefault=false
      - --providers.docker.swarmmode
      - --entrypoints.http.address=:80
      - --entrypoints.https.address=:443
      - --entryPoints.http.forwardedHeaders.trustedIPs=127.0.0.1/32,10.1.22.0/24
      #- --entryPoints.https.forwardedHeaders.trustedIPs=127.0.0.1/32,129.144.0.0/12,129.144.0.0/12,129.213.0016130.35.0.0/16,132.145.0.0/16,134.70.0.0/16,138.1.0.0/16,140.204.0.0/16,140.91.0.0/16,147.154.0.0/16,192.157.18.0/23,192.29.0.0/16,192.69.118.0/23,198.181.48.0/21,199.195.6.0/23,205.147.88.0/21
      #- --log.level=INFO
      - --accesslog
      - --api
      - --log
      - --log.filePath=/var/log/traefik/traefik.log
      - --accesslog.filepath=/var/log/traefik/access.log
      - --accesslog.filters.statuscodes=200-499
      - --accesslog.filters.retryattempts
      - --accesslog.filters.minduration=10ms
    networks:
      - lb_network

networks:
  # Use the previously created public network "traefik-public", shared with other
  # services that need to be publicly available via this Traefik
  lb_network:
    driver: overlay
    external: true
  agent_network:
    driver: overlay
    external: true
    attachable: true