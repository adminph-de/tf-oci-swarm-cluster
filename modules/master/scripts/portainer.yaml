## Preperations for the configuration file:
# docker network create -d overlay agent_network

version: "3.8"

services:

  app:
    image: portainer/portainer-ce:latest
    command: -H tcp://tasks.agent:9001 --tlsskipverify
    volumes:
      - /var/nfsshare/.portainer:/data
    networks:
      - public
      - agent_network
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints: [node.role == manager]
      labels:
        - "traefik.enable=true"
        - "traefik.docker.network=public"
        - "traefik.constraint-label=swarm"
        - "traefik.http.routers.portainer.rule=Host(`${oci_swarm_fqdn}`) && (PathPrefix(`/portainer`) || PathPrefix(`/api`))"
        - "traefik.http.routers.portainer.entrypoints=http"
        - "traefik.http.routers.portainer.middlewares=portainer-strip"
        - "traefik.http.middlewares.portainer-strip.stripprefix.prefixes=/portainer"
        - "traefik.http.middlewares.portainer-strip.stripprefix.forceslash=true"
        - "traefik.http.services.portainer.loadbalancer.server.port=9000"
        - "traefik.http.routers.portainer.service=portainer"
        # Edge
        - "traefik.http.routers.edge.rule=Host(`${oci_swarm_fqdn}`) && (PathPrefix(`/edge`) || PathPrefix(`/api`))"
        - "traefik.http.routers.edge.entrypoints=http"
        - "traefik.http.routers.edge.middlewares=edge-strip"
        - "traefik.http.middlewares.edge-strip.stripprefix.prefixes=/edge"
        - "traefik.http.middlewares.portainer-strip.stripprefix.forceslash=true"
        - "traefik.http.services.edge.loadbalancer.server.port=8000"
        - "traefik.http.routers.edge.service=edge"

  agent:
    image: portainer/agent
    environment:
      # REQUIRED: Should be equal to the service name prefixed by "tasks." when
      # deployed inside an overlay network
      AGENT_CLUSTER_ADDR: tasks.agent
      # AGENT_PORT: 9001
      # LOG_LEVEL: debug
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker/volumes:/var/lib/docker/volumes
    networks:
      - agent_network
    deploy:
      mode: global
      placement:
        constraints: [node.platform.os == linux]

networks:
  public:
    external: true
  agent_network:
    external: true